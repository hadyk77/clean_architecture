// Mocks generated by Mockito 5.1.0 from annotations
// in clean_code/test/modules/auth/presenter/bloc/user_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:clean_code/core/error/failure.dart' as _i6;
import 'package:clean_code/modules/authentication/domain/entities/user_entity.dart'
    as _i7;
import 'package:clean_code/modules/authentication/domain/repository/user_repository.dart'
    as _i2;
import 'package:clean_code/modules/authentication/domain/use_cases/login_use_case.dart'
    as _i4;
import 'package:clean_code/modules/authentication/domain/use_cases/logout_use_case.dart'
    as _i9;
import 'package:clean_code/modules/authentication/domain/use_cases/register_use_case.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserRepository_0 extends _i1.Fake implements _i2.UserRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeOption_2<A> extends _i1.Fake implements _i3.Option<A> {}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i4.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository =>
      (super.noSuchMethod(Invocation.getter(#userRepository),
          returnValue: _FakeUserRepository_0()) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>> call(
          {String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#call, [], {#email: email, #password: password}),
          returnValue: Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
              _FakeEither_1<_i6.Failure, _i7.UserEntity>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i8.RegisterUseCase {
  MockRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository =>
      (super.noSuchMethod(Invocation.getter(#userRepository),
          returnValue: _FakeUserRepository_0()) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserEntity>> call(
          {String? email, String? password, String? name}) =>
      (super.noSuchMethod(
          Invocation.method(
              #call, [], {#email: email, #password: password, #name: name}),
          returnValue: Future<_i3.Either<_i6.Failure, _i7.UserEntity>>.value(
              _FakeEither_1<_i6.Failure, _i7.UserEntity>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.UserEntity>>);
}

/// A class which mocks [LogoutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutUseCase extends _i1.Mock implements _i9.LogoutUseCase {
  MockLogoutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository =>
      (super.noSuchMethod(Invocation.getter(#userRepository),
          returnValue: _FakeUserRepository_0()) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Option<_i6.Failure>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue: Future<_i3.Option<_i6.Failure>>.value(
                  _FakeOption_2<_i6.Failure>()))
          as _i5.Future<_i3.Option<_i6.Failure>>);
}
